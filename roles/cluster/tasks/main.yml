---
- name: Check if cluster consist of at least 2 nodes
  fail:
    msg: 'Cluster must have at least 2 members'
  when: play_hosts|count() < 2
  run_once: true
  tags: ['cluster', 'create']

- name: Add hosts to /etc/hosts
  lineinfile:
    dest: '/etc/hosts'
    regexp: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} "
    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }} {{ hostvars[item]['ansible_fqdn'] }}"
  with_items: "{{ play_hosts }}"
  tags: ['cluster', 'create']
- name: Install Pacemaker + Corosync
  apt:
    name:
      - corosync
      - pacemaker
      - pcs
      - pacemaker-cli-utils
      - libxml2-utils
      - python3-setuptools
    state: present
  environment:
    RUNLEVEL: 1
  tags: ['apt', 'cluster']
- name: "Check if cluster ini file exists"
  command: "test -f {{ ini_file }}"
  delegate_to: localhost
  register: cluster_ini_exists
  run_once: true
  changed_when: "cluster_ini_exists.rc != 0"
  notify: Cluster password created
  ignore_errors: true
  tags: ['cluster', 'cluster-ini']
- name: Create cluster.ini from variable
  copy:
    dest: "{{ ini_file }}"
    content: |
      [{{ ini_section }}]
      password={{ cluster_user_password }}
  delegate_to: localhost
  when: "cluster_ini_exists.rc != 0 and cluster_user_password is defined and cluster_user_password != ''"
  tags: ['cluster', 'create']
- name: Create cluster.ini
  shell: "(echo '[{{ ini_section }}]'; echo -n 'password=' ; cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c${1:-32}) > {{ ini_file }}"
  delegate_to: localhost
  when: "cluster_ini_exists.rc != 0"
  tags: ['cluster', 'cluster-ini']
- name: Password debug
  debug:
    msg: "Password: {{ lookup('ini', 'password section='+ini_section+' file='+ini_file) }}"
  delegate_to: localhost
  tags: ['cluster', 'cluster-ini']
- name: Password hash debug
  debug:
    msg: "Password Hash: {{ lookup('ini', 'password section='+ini_section+' file='+ini_file)|password_hash('sha512') }}"
  delegate_to: localhost
  tags: ['cluster', 'cluster-ini']
- name: Start pcsd
  systemd:
    name: pcsd
    state: started
  tags: ['cluster', 'systemd', 'pcsd', 'systemd-start']
- name: Enable starting pcsd on system boot
  systemd:
    name: pcsd
    enabled: yes
  tags: ['cluster', 'systemd', 'pcsd', 'systemd-enable']
- name: Create hacluster user for use with pcs
  user:
    name: hacluster
    password: "{{ lookup('ini', 'password section='+ini_section+' file='+ini_file)|password_hash('sha512') }}"
    update_password: "{% if force_password_override %}always{% else %}on_create{% endif %}"
  tags: ['cluster', 'user']
- name: check if debian default corosync.conf is pressent
  command: "grep -q 'cluster_name: debian' /etc/corosync/corosync.conf"
  register: debianconfig
  check_mode: no
  ignore_errors: yes
  changed_when: no
  tags: ['cluster', 'create']
- name: Remove default debian corosync.conf
  file:
    path: /etc/corosync/corosync.conf
    state: absent
  when: debianconfig.rc == 0
- name: Restart pcsd
  systemd:
    name: pcsd
    state: started
  tags: ['cluster', 'systemd', 'pcsd', 'systemd-start']
  when: debianconfig.rc == 0
- name: Check if host is already part of cluster
  command: "grep -q 'cluster_name: {{ clustername }}' /etc/corosync/corosync.conf"
  register: clusterexists
  check_mode: no
  ignore_errors: yes
  changed_when: no
  tags: ['cluster', 'create']
- name: Authorize cluster nodes
  pcs_auth:
    node_name: "{% if use_fqdn %}{{ hostvars[item]['ansible_fqdn'] }}{% else %}{{ hostvars[item]['ansible_hostname']  }}{% endif %}"
    username: "hacluster"
    password: "{{ lookup('ini', 'password section='+ini_section+' file='+ini_file) }}"
  with_items: "{{ play_hosts }}"
  tags: ['cluster', 'create']
  when: pacemaker == 'v2'
- name: Authorize cluster nodes
  shell: "pcs host auth {% for item in play_hosts %}{% if use_fqdn %}{{ hostvars[item]['ansible_fqdn'] }}{% else %}{{ hostvars[item]['ansible_hostname']  }}{% endif %} {% endfor %} -u hacluster -p {{ lookup('ini', 'password section='+ini_section+' file='+ini_file) }} "
  tags: ['cluster', 'create']
  when: pacemaker == 'v3'
- name: Setup cluster
  pcs_cluster:
    node_list: "{% for item in play_hosts %}{% if use_fqdn %}{{ hostvars[item]['ansible_fqdn'] }}{% else %}{{ hostvars[item]['ansible_hostname'] }}{% endif %} {% endfor %}"
    cluster_name: "{{ clustername }}"
    transport: "udpu"
    allowed_node_changes: "{% if allow_cluster_expansion|bool %}add{% else %}none{% endif %}"
  run_once: true
  tags: ['cluster', 'create']
  when:
    - clusterexists.rc != 0
    - pacemaker == 'v2'
- name: Setup cluster
  pcs_cluster:
    node_list: "{% for item in play_hosts %}{% if use_fqdn %}{{ hostvars[item]['ansible_fqdn'] }}{% else %}{{ hostvars[item]['ansible_hostname'] }}{% endif %} addr={{ hostvars[item]['ansible_default_ipv4']['address'] }} {% endfor %}"
    cluster_name: "{{ clustername }}"
    transport: "knet"
    allowed_node_changes: "{% if allow_cluster_expansion|bool %}add{% else %}none{% endif %}"
  run_once: true
  tags: ['cluster', 'create']
  when:
    - clusterexists.rc != 0
    - pacemaker == 'v3'

- name: Check if timeout absent
  shell: "grep -w token: /etc/corosync/corosync.conf"
  register: token_timeout_is_absent
  failed_when: false
  changed_when: token_timeout_is_absent.rc != 0
  tags: ['cluster', 'pacemaker', 'cluster-timeout']
- name: Add token timeout
  replace:
    regexp: '(totem\s*{[\w\W]*?)(})'
    replace: '\1    token: {{ timeout }}\n\2'
    path: "/etc/corosync/corosync.conf"
  tags: ['cluster', 'pacemaker', 'cluster-timeout']
  register: timeout_added
  when: token_timeout_is_absent.changed

- name: Check if timeout is current
  shell: "grep -w token: /etc/corosync/corosync.conf | grep -w '{{ timeout }}'"
  register: token_timeout_is_current
  failed_when: false
  changed_when: token_timeout_is_current.rc != 0
  tags: ['cluster', 'pacemaker', 'cluster-timeout']
- name: Update timeout
  replace:
    regexp: 'token: .*'
    replace: 'token: {{ timeout }}'
    path: /etc/corosync/corosync.conf
  register: timeout_updated
  tags: ['cluster', 'pacemaker', 'cluster-timeout']
  when: token_timeout_is_current.changed

- name: Enable Services
  systemd:
    name: "{{ item }}"
    enabled: true
  tags: ['cluster', 'systemd', 'pacemaker', 'systemd-start']
  with_items:
  - corosync
  - pacemaker
- name: Start Services
  systemd:
    name: "{{ item }}"
    state: started
  tags: ['cluster', 'systemd', 'corosync', 'systemd-start']
  with_items:
  - corosync
  - pacemaker

- name: Set stickyness to prevent resources from moving unnecessarily
  command: "pcs resource defaults resource-stickyness={{ stickyness }}"
  run_once: true
  changed_when: no
  tags: ['cluster', 'pacemaker', 'stickyness']


- name: Restart corosync
  shell: "pcs cluster reload corosync"
  tags: ['cluster', 'pacemaker', 'cluster-timeout']
  when: timeout_updated is defined and timeout_updated.changed or timeout_added is defined and timeout_added.changed
