#!/bin/sh
#
#   Resource Agent for managing hetzner cloud floating ip resources.
#
#   License:      MIT License (MIT)
#   (c) 2018-2018 Sven Speckmaier
#
#   Thank you to Tuomo Soini and Lars Marowsky-Br√©e for writing the IPaddr2
#   ressource agent which served as reference and inspiration for this
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

: OCF_RESKEY_ip=
: OCF_RESKEY_api_token=
FLOATING_IP=${OCF_RESKEY_ip}
API_TOKEN=${OCF_RESKEY_api_token}

# This is used to debug from a host not part of the cluster
if [ -z "${HOSTNAME}" ] ; then
	HOSTNAME="$(hostname)"
fi

#######################################################################

#######################################################################
# Helper:

ip_init() {
	SERVER_ID="$(server_id)"
	FLOATING_IP_ID="$(ip_to_id)"
}

api_request() {
	REQUEST_URL="${1}"

	FIRST_REQUEST="true"
	while ! curl -f -s -H "Authorization: Bearer $API_TOKEN" "${REQUEST_URL}" ; do

		if [ "${FIRST_REQUEST}" = "false" ] ; then
			sleep 5s
		fi
		FIRST_REQUEST="false"
	done

}

server_id() {

	RESPONSE_DATA="$(api_request "https://api.hetzner.cloud/v1/servers?name=${HOSTNAME}")"

	if python3 -c "import sys, json;
jsonData = json.load(sys.stdin)
servers = jsonData['servers']
if len(servers) < 1:
	sys.exit(1)
print(servers[0]['id'])
sys.exit(0)
" <<RESPONSETEXT
${RESPONSE_DATA}
RESPONSETEXT
	then
		return 0
	fi

	return 1
}

ip_to_id() {

	RESPONSE_DATA="$(api_request "https://api.hetzner.cloud/v1/floating_ips")"

	if python3 -c "import sys, json, socket;
jsonData = json.load(sys.stdin)
floatingIps = jsonData['floating_ips']
for floatingIp in floatingIps:
	if floatingIp['ip'] == '${FLOATING_IP}':
		print(floatingIp['id'])
		sys.exit(0)
sys.exit(1)
" <<RESPONSETEXT
${RESPONSE_DATA}
RESPONSETEXT
	then
		return 0
	fi

	return 1
}

ip_served() {

	RESPONSE_DATA="$(api_request "https://api.hetzner.cloud/v1/floating_ips")"

	if python3 -c "import sys, json, socket;
jsonData = json.load(sys.stdin)
expectedServerId = ${SERVER_ID}
floatingIps = jsonData['floating_ips']
for floatingIp in floatingIps:
	if floatingIp['ip'] == '${FLOATING_IP}':
		if floatingIp['server'] == expectedServerId:
			print('ok')
			sys.exit(0)
		else:
			print('no')
			sys.exit(1)
print('not found')
sys.exit(2)
" <<RESPONSETEXT
${RESPONSE_DATA}
RESPONSETEXT
   then
		return 0
	fi

	return 1
}

ip_validate() {
	check_binary curl
	
	check_binary python3

	if [ -z "$SERVER_ID" ] ; then
		echo "hostname ${HOSTNAME} not found in cloud api"
		exit $OCF_ERR_CONFIGURED
	fi

	if [ -z "$FLOATING_IP_ID" ] ; then
		echo "floating_ip $FLOATING_IP not found in cloud api"
		exit $OCF_ERR_CONFIGURED
	fi
}

#######################################################################

#######################################################################
# Actions:
ip_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

ip_start() {
	while ! ( curl -f -s -X POST \
	  	-H "Content-Type: application/json" \
	  	-H "Authorization: Bearer $API_TOKEN"  \
		  -d '{"server":'$SERVER_ID'}' \
		    "https://api.hetzner.cloud/v1/floating_ips/${FLOATING_IP_ID}/actions/assign" \
			 > /dev/null ) ; do
		sleep 1s
	done

	exit $OCF_SUCCESS
}

ip_stop() {
	# unassigning the ip address seems to sometimes cause routing problems when
	# it is assigned again imidiatly afterwards
	exit ${OCF_SUCCESS}
}

ip_monitor() {
	local ip_status="$(ip_served)"

	case "${ip_status}" in
	"ok")
		exit $OCF_SUCCESS
		;;
	"no")
		exit $OCF_NOT_RUNNING
		;;
	"not found"|*)
		exit $OCF_ERR_GENERIC
		;;
	esac
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="FloatingIP" version="0.1">
  <version>0.1</version>
  <longdesc lang="en">
Manage a hetzner cloud floating ip as cloud ressource.
Only routing the ip to this server is taken care of. Pair up with a IPaddr2
resource to properly activate the floating ip.
WARNING: This resource assumes that the hostname on the machine is the same as
its name in the Cloud Api
  </longdesc>
  <shortdesc lang="en">Manage a hetzner cloud floating ip as cloud ressource.</shortdesc>
  <parameters>
    <parameter name="ip" unique="1" required="1">
      <longdesc lang="en">
		The ip address to route to this host
		e.g. 66.77.88.99
      </longdesc>
      <shortdesc lang="en">ip address</shortdesc>
      <content type="string"/>
    </parameter>
    <parameter name="api_token" unique="0" required="1">
      <longdesc lang="en">
		The api token to access the hetzner cloud api. Created in Access/Api-Tokens under 
https://console.hetzner.cloud</longdesc>
      <shortdesc lang="en">Token for hetzner cloud api</shortdesc>
      <content type="string" default="false"/>
    </parameter>
  </parameters>
  <actions>
    <action name="start"        timeout="20" />
    <action name="stop"         timeout="20" />
    <action name="monitor"      timeout="20"
                                interval="10" depth="0" />
    <action name="reload"       timeout="20" />
    <action name="migrate_to"   timeout="20" />
    <action name="migrate_from" timeout="20" />
    <action name="meta-data"    timeout="5" />
    <action name="validate-all"   timeout="20" />
  </actions>
</resource-agent>
END
}

#######################################################################

#######################################################################
# Entrypoint:

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
usage|help)	ip_usage
		exit $OCF_SUCCESS
		;;
esac

ip_init
ip_validate

case $__OCF_ACTION in
start)		ip_start
		;;
stop)		ip_stop
		;;
status)		ip_status=`ip_served`
		if [ $ip_status = "ok" ]; then
			echo "running"
			exit $OCF_SUCCESS
		else
			echo "stopped"
			exit $OCF_NOT_RUNNING
		fi
		;;
monitor) ip_monitor
		;;
validate-all)	;;
*)		ip_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
#######################################################################
