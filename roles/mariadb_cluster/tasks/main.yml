---
- name: Install python mysql module
  apt:
    name: python-mysqldb
    state: present
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'apt']
- name: Disable mariadb service 'mariadb' in systemd
  systemd:
    name: mariadb
    enabled: false
  register: mariadb_service
  tags: ['mariadb', 'cluster', 'mariadb_cluster']
- name: Disable mariadb service 'mysql' in systemd
  systemd:
    name: mysql
    enabled: false
  register: mysql_service
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'systemd-disable', 'systemd']
- name: Stop mariadb service 'mysql' if one of the services was disabled
  systemd:
    name: mysql
    state: stopped
  when: mysql_service.changed or mariadb_service.changed
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'systemd-disable', 'systemd']
- name: Stop mariadb service 'mariadb' if one of the services was disabled
  systemd:
    name: mariadb
    state: stopped
  when: mysql_service.changed or mariadb_service.changed
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'systemd-stop', 'systemd']
- name: Check target mounted
  shell: "mount | grep -q {{ data_dir }}"
  when: mounted
  changed_when: no
  ignore_errors: true
  register: datadir_mounted
- name: Check data_dir empty
  find:
    paths: "{{ data_dir }}"
    file_type: file
  register: db_files
  when: mounted and ( datadir_mounted.rc == 0 )
- name: 
  command: mysql_install_db --skip-auth-anonymous-user
  args:
    chdir: "{{ data_dir }}"
  when: mounted and ( datadir_mounted.rc == 0 ) and (db_files.matched|int == 0)
- name: Create /etc/my.cnf
  template:
    src: my.cnf
    dest: /etc/my.cnf
  tags: ['mariadb', 'cluster', 'mariadb_cluster']
- name: Create mysql cluster resource
  pcs_resource:
    name: mysql-server
    state: present
    resource_type: "ocf:heartbeat:mysql"
    options: "datadir=/mnt/mysql meta failure-timeout=10"
  run_once: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'pcs-resource']
- name: Create mysql cluster colocation constraint
  pcs_constraint_colocation:
    resource1: mysql-server
    resource2: mysql_mount
  run_once: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'pcs-constraint', 'pcs-colocation']
- name: Create mysql cluster order constraint
  pcs_constraint_order:
    resource1: mysql_mount
    resource2: mysql-server
  run_once: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'pcs-constraint', 'pcs-order']
- name: Check if mysql is running
  command: pgrep mysqld
  register: mysqld_running
  changed_when: no
  ignore_errors: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster']
- name: Create mysql databases
  mysql_db:
    login_unix_socket: '/var/lib/mysqld/mysqld.sock'
    encoding: utf8
    name: "{{ item.name }}"
    state: present
  when: mysqld_running.rc == 0
  with_items: "{{ databases }}"
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'database']
- name: Create mysql users
  mysql_user:
    check_implicit_admin: true
    login_unix_socket: '/var/lib/mysqld/mysqld.sock'
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    host: '{{ item.host }}'
    state: present
    priv: "{% for table in item.privileges %}{{ table.table }}:{% for privilege in table.privileges %}{{ privilege }}{% if loop.last != True %},{% endif %}{% endfor %}{% if loop.last != True %}/{% endif %}{% endfor %}"
  with_items: "{{ users }}"
  when: "mysqld_running.rc == 0"
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'user']
- name: Create /etc/logrotate.cluster
  file:
    path: /etc/logrotate.cluster
    state: directory
    mode: 0755
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'apt']
- name: Copy mysql-server to /etc/logrotate.cluster/
  copy:
    src: mysql-server
    dest: /etc/logrotate.cluster/mysql-server
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'apt']
- name: Check if /etc/logrotate.d/mysql-server exists
  stat:
    follow: no
    path: /etc/logrotate.d/mysql-server
    get_mime: no
    get_attributes: no
    get_checksum: no
  register: logrotate_mysql_server
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'apt']
- name: Remove /etc/logrotate.d/mysql-server if it is not a symlink
  file:
    path: /etc/logrotate.d/mysql-server
    state: absent
  when: "logrotate_mysql_server.stat.islnk is defined and logrotate_mysql_server.stat.islnk == False"
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'apt']
- name: Create logrotate resource
  pcs_resource:
    name: mysql-server-logrotate
    state: present
    resource_type: "ocf:heartbeat:symlink"
    options: "link=/etc/logrotate.d/mysql-server target=/etc/logrotate.cluster/mysql-server meta failure-timeout=10"
  run_once: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'pcs-resource']
- name: Create logrotate cluster colocation constraint
  pcs_constraint_colocation:
    resource1: mysql-server-logrotate
    resource2: mysql-server
  run_once: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'pcs-constraint', 'pcs-colocation']
- name: Create logrotate cluster order constraint
  pcs_constraint_order:
    resource1: mysql-server
    resource2: mysql-server-logrotate
  run_once: true
  tags: ['mariadb', 'cluster', 'mariadb_cluster', 'pcs-constraint', 'pcs-order']
